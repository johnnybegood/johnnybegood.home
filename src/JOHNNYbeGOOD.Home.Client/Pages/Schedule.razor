@page "/schedule"
@using JOHNNYbeGOOD.Home.Api.Contracts
@using JOHNNYbeGOOD.Home.Api.Contracts.Models
@inject IFeedingService service

@if (schedule == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Alert @ref="failedAlert" Color="Color.Danger"><strong>Saving schedule failed</strong>, @failureMessage <CloseButton /></Alert>

    <Button Color="Color.Primary" Clicked="@SaveSchedule" IsLoading="isSaving">Save</Button>
    <Button Color="Color.Secondary" Clicked="@AddSlot" IsDisabled="isSaving">Add slot</Button>

    if (!slots.Any())
    {
        <Alert Color="Color.Warning">No schedule defined</Alert>
    }

    foreach (var slot in slots)
    {
        <Card Margin="Margin.Is2" @key="@slot.Id">
            <CardHeader>
                <CardTitle>Slot @slot.Id</CardTitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is2">
                        <FieldLabel>Hours</FieldLabel>
                        <FieldBody>
                            <NumericEdit Placeholder="HH" @bind-Value="@slot.Hour" Decimals="0" IsDisabled="isSaving" />
                        </FieldBody>
                    </Field>
                    <Field ColumnSize="ColumnSize.Is2">
                        <FieldLabel>Minutes</FieldLabel>
                        <FieldBody>
                            <NumericEdit Placeholder="MM" @bind-Value="@slot.Minutes" Decimals="0" IsDisabled="isSaving" />
                        </FieldBody>
                    </Field>
                </Fields>
                <Field>
                    <FieldLabel>Days</FieldLabel>
                    <FieldBody>
                        <Check @bind-Checked="@slot.OnMonday" IsDisabled="isSaving">Monday</Check>
                        <Check @bind-Checked="@slot.OnTuesday" IsDisabled="isSaving">Tuesday</Check>
                        <Check @bind-Checked="@slot.OnWednesday" IsDisabled="isSaving">Wednesday</Check>
                        <Check @bind-Checked="@slot.OnThursday" IsDisabled="isSaving">Thursday</Check>
                        <Check @bind-Checked="@slot.OnFriday" IsDisabled="isSaving">Friday</Check>
                        <Check @bind-Checked="@slot.OnSaturday" IsDisabled="isSaving">Saturday</Check>
                        <Check @bind-Checked="@slot.OnSunday" IsDisabled="isSaving">Sunday</Check>
                    </FieldBody>
                </Field>
            </CardBody>
            <CardFooter>
                <Button Color="Color.Danger" Clicked="@(() => DeleteSlot(slot))" IsDisabled="isSaving">Delete slot</Button>
            </CardFooter>
        </Card>
    }
}

@code {
    private ScheduleDTO schedule;
    private IList<ScheduleResponseSlot> slots;
    private bool isSaving;
    private Alert failedAlert;
    private string failureMessage;

    private void AddSlot()
    {
        slots.Add(new ScheduleResponseSlot
        {
            Id = slots.Count,
            Hour = DateTime.Now.AddHours(1).Hour,
            Minutes = 0,
            OnMonday = true,
            OnTuesday = true,
            OnWednesday = true,
            OnThursday = true,
            OnFriday = true,
            OnSaturday = true,
            OnSunday = true
        });
    }

    private void DeleteSlot(ScheduleResponseSlot slot)
    {
        slots.Remove(slot);
    }

    private void ShowFailure(string message)
    {
        failureMessage = message;
        failedAlert.Show();
    }

    private async Task SaveSchedule()
    {
        isSaving = true;

        try
        {
            await service.PutCurrentSchedule(new ScheduleDTO { Slots = slots });
            await LoadSchedule();
        }
        catch (Exception ex)
        {
            ShowFailure($"{ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    protected override Task OnInitializedAsync()
    {
        return LoadSchedule();
    }

    private async Task LoadSchedule()
    {
        schedule = await service.GetCurrentSchedule();
        slots = schedule.Slots?.ToList();
    }
}